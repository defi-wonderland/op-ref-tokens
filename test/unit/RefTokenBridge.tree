RefTokenBridgeUnit::send
├── When relay chain id is the block chain id
│   └── It should revert
├── When relay chain id is zero
│   └── It should revert
├── When amount is zero
│   └── It should revert
├── When recipient is zero
│   └── It should revert
├── When native asset chain id does not match the block chain id when deploying a RefToken
│   └── It should revert
├── When called with a native token first time
│   ├── It should create the RefToken
│   ├── It should lock the tokens
│   ├── It should send the message to call relay
│   └── It should emit MessageSent
├── When calling with the native token after the creation of the RefToken
│   ├── It should lock the tokens
│   ├── It should send the message to call relay
│   └── It should emit MessageSent
└── When called with a RefToken
    ├── It should burn the tokens
    ├── It should send the message to call relay
    └── It should emit MessageSent

RefTokenBridgeUnit::sendAndExecute
├── When execution data destination executor is the zero address
│   └── It should revert
├── When execution data destination chain id is zero
│   └── It should revert
├── When execution data destination chain id is the block chain id
│   └── It should revert
├── When relay chain id is the block chain id
│   └── It should revert
├── When relay chain id is zero
│   └── It should revert
├── When amount is zero
│   └── It should revert
├── When recipient is zero
│   └── It should revert
├── When native asset chain id does not match the block chain id when deploying a RefToken
│   └── It should revert
├── When called with a native token first time
│   ├── It should create the RefToken
│   ├── It should lock the tokens
│   ├── It should send the message to call relayAndExecute
│   └── It should emit MessageSent
├── When calling with the native token after the creation of the RefToken
│   ├── It should lock the tokens
│   ├── It should send the message to call relayAndExecute
│   └── It should emit MessageSent
└── When called with a RefToken
    ├── It should burn the tokens
    ├── It should send the message to call relayAndExecute
    └── It should emit MessageSent

RefTokenBridgeUnit::relay
├── When sender is not the L2 to L2 cross domain messenger
│   └── It should revert
├── When cross domain sender is not the RefToken bridge
│   └── It should revert
├── When on the native asset chain
│   ├── It should unlock the native assets to the recipient
│   └── It should emit MessageRelayed
├── When called not on the native asset chain and the RefToken is deployed
│   ├── It should mint the tokens to the recipient
│   └── It should emit MessageRelayed and revert
└── When called not on the native asset chain and the RefToken is not deployed
    ├── It should deploy the RefToken
    ├── It should mint the tokens to the recipient
    └── It should emit MessageRelayed


RefTokenBridgeUnit::relayAndExecute
├── When sender is not the L2 to L2 cross domain messenger
│   └── It should revert
├── When cross domain sender is not the RefToken bridge
│   └── It should revert
├── When on the native asset chain and execution succeeds
│   ├── It should unlock the native assets to the executor
│   ├── It should approve the executor
│   ├── It should execute the data
│   ├── It should emit MessageRelayed
│   └── It should revoke the executor approval
├── When on the native asset chain and execution fails
│   ├── It should unlock the native assets to the executor
│   ├── It should approve the executor
│   ├── It should execute the data
│   ├── It should send RefTokens to the refund address on the origin chain
│   └── It should revoke the executor approval
├── When not on the native asset chain and the RefToken is deployed and execution succeeds
│   ├── It should mint the tokens to the executor
│   ├── It should approve the executor
│   ├── It should execute the data
│   ├── It should emit MessageRelayed
│   └── It should revoke the executor approval
├── When not on the native asset chain and the RefToken is not deployed and execution succeeds
│   ├── It should deploy the RefToken
│   ├── It should mint the tokens to the executor
│   ├── It should approve the executor
│   ├── It should execute the data
│   ├── It should emit MessageRelayed
│   └── It should revoke the executor approval
├── When not on the native asset chain and RefToken is deployed and execution fails
│   ├── It should mint the tokens to the executor
│   ├── It should approve the executor
│   ├── It should execute the data
│   ├── It should burn the RefTokens
│   ├── It should send RefTokens to the refund address on the origin chain
│   └── It should revoke the executor approval
└── When not on the native asset chain and the RefToken is not deployed and execution fails
    ├── It should deploy the RefToken
    ├── It should mint the tokens to the executor
    ├── It should approve the executor
    ├── It should execute the data
    ├── It should burn the RefTokens
    ├── It should send RefTokens to the refund address on the origin chain
    └── It should revoke the executor approval

RefTokenBridgeUnit::unlock
├── When caller is not the L2 to L2 cross domain messenger
│   └── It should revert
├── When caller is not the RefToken for the native asset
│   └── It should revert
├── When called by the L2 to L2 Cross Domain Messenger
│   ├── It should transfer the tokens to user
│   └── It should emit TokenUnlocked
└── When called by the associated RefToken
    ├── It should transfer the tokens to user
    └── It should emit TokensUnlocked

RefTokenBridgeUnit::getRefToken
├── When called with a native token and the RefToken exists
│   └── It should return the RefToken
├── When called with a native token and the RefToken doesnt exist
│   └── It should empty the RefToken
├── When called with a RefToken and the RefToken exists
│   └── It should return the RefToken
└── When called with a RefToken and the RefToken doesnt exist
    └── It should return the RefToken
